#!/usr/bin/env bash

# git privacy - see `privacy_help()`.

git_privacy_version='0.1.0'

function privacy_version() {
  echo "git-privacy v$git_privacy_version"
}

function privacy_help() {
  help_text=$(cat <<-EOF
	git privacy - keep your coding hours private.
	
	Usage:  git privacy [init|redact|verify]
	  or:   git privacy [-v,--version|version]
	  or:   git privacy [-h,--help|help]

	init                    installs git privacy on current git repo and
	                        setup post-commit and pre-push hooks.

	redact                  used automaticaly by post-commit hook to redact
	                        commiter and author timestamps.

	verify                  used automaticaly by pre-push hook to check if
	                        current branch does not has any leaked timestamps.
	                        by default, only checks non pushed commits.

	-v, --version, version  prints current version.
	-h, --help, help        prints this help.
	EOF
	)
  echo "$help_text"
  return
}

read -d '' __post_commit << 'EOF' || true
#!/usr/bin/env bash

# git-privacy hook to redact
# set environment var GIT_PRIVACY_DISABLE to skip redacting.

set -e

. "$(pwd)/$(dirname "$0")"/git-privacy
privacy_redact
EOF

read -d '' __pre_push << 'EOF' || true
#!/usr/bin/env bash

# git-privacy hook to verify
# set environment var GIT_PRIVACY_DISABLE to skip verification.

set -e

. "$(pwd)/$(dirname "$0")"/git-privacy
privacy_verify
EOF

function privacy_init() {
  # creates the post-commit and pre-push hooks
  # post-commit - redacts commit timestamps
  # pre-push - verifies that no leaked timestamps are published

  if [[ "$(git rev-parse --is-inside-work-tree)" != "true" ]]; then
    echo "git-privacy: not a git repo!"
    exit 1
  fi

  # copies git-privacy locally
  cp "$(which git-privacy)" .git/hooks/git-privacy

  # creates hooks
  echo "$__post_commit" > .git/hooks/post-commit
  chmod +x .git/hooks/post-commit
  echo "$__pre_push" > .git/hooks/pre-push
  chmod +x .git/hooks/pre-push

  echo "git privacy v$git_privacy_version initialized on $PWD"

  return
}

function privacy_redact() {
  # redacts last commit YYYY-mm-DDTHH:MM:SS+ZZZZ to YYYY-mm-DDT00:00:00+0000

  # avoid infinite commit loop / disable redacting
  [[ -z ${GIT_PRIVACY_DISABLE:-''} ]] || exit 0

  # get author date
  author_old_date=$(git log --date=format:'%Y-%m-%d' --pretty=format:'%ad' -n1)

  # get committer date/time
  commit_old_date=$(git log --date=format:'%Y-%m-%d' --pretty=format:'%cd' -n1)
  # commit_old_time=$(git log --date=format:'%H:%M:%S' --pretty=format:'%cd' -n1)

  # stash changes (git commit --amend commits staged changes)
  pre_stash_size=$(git stash list | wc -l)
  git stash || true
  post_stash_size=$(git stash list | wc -l)

  # calculate new author/commit timestamp
  author_new_datetime="${author_old_date}T00:00:00+0000"
  commit_new_datetime="${commit_old_date}T00:00:00+0000"

  # amend commit
  GIT_PRIVACY_DISABLE=1 GIT_COMMITTER_DATE="$commit_new_datetime" \
    git commit \
    --amend --date="$author_new_datetime" \
    --no-edit --no-verify --allow-empty --quiet

  # apply stash if any
  (( pre_stash_size != post_stash_size )) && git stash pop || true

  return
}

function privacy_verify() {
  # checks if there are leaked timestamps

  # disable verification
  [[ -z ${GIT_PRIVACY_DISABLE:-''} ]] || exit 0

  # if branch has remote,
  if git status -sb | grep -Fq '...'; then
    # check only unpushed commits
    echo "branch has upstream set, checking local commits only."
    range='@{push}..'
  else
    # check everything
    echo "branch has no upstream set, checking all commits."
    range=''
  fi
  
  leaked_timestamps="$(
    git log ${range} --pretty=format:'%h|%ai|%ci' \
      | grep -v '00:00:00 +0000'
  )"
  if [[ $leaked_timestamps ]]; then
    echo -e "leaked timestamps:\n$leaked_timestamps"
  fi

  number_of_leaked_timestamps="$(
    git log ${range} --pretty=format:'%ai|%ci' \
      | grep -v '00:00:00 +0000' | wc -l
  )"
  return "$number_of_leaked_timestamps"
}

case ${1:-''} in
  '')
    true
    ;;
  -v|--version|version)
    privacy_version
    ;;
  -h|--help|help)
    privacy_help
    ;;
  init)
    privacy_init
    ;;
  verify)
    privacy_verify
    ;;
  redact)
    privacy_redact
    ;;
  *)
    echo "Unknown command '$*'"
    exit 1
esac
